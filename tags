!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
Convolution	code/layers_convolution.py	/^class Convolution:$/;"	c
Model	code/model.py	/^class Model:$/;"	c
ReluLayer	code/layers_activation.py	/^class ReluLayer:$/;"	c
SoftmaxLayer	code/layers_loss.py	/^class SoftmaxLayer:$/;"	c
__init__	code/layers_activation.py	/^    def __init__(self):$/;"	m	class:ReluLayer
__init__	code/layers_convolution.py	/^    def __init__(self, filters, filter_size, padding, stride):$/;"	m	class:Convolution
__init__	code/layers_loss.py	/^    def __init__(self):$/;"	m	class:SoftmaxLayer
__init__	code/model.py	/^    def __init__(self, *model, **kwargs):$/;"	m	class:Model
backward	code/layers_activation.py	/^    def backward(self, dA):$/;"	m	class:ReluLayer
backward	code/layers_convolution.py	/^    def backward(self, dZ):$/;"	m	class:Convolution
backward	code/layers_loss.py	/^    def backward(self, dA):$/;"	m	class:SoftmaxLayer
conv_single_step	code/layers_convolution.py	/^    def conv_single_step(self, a_slice_prev, W, b):$/;"	m	class:Convolution
evaluate	code/model.py	/^    def evaluate(self, data, labels):$/;"	m	class:Model
forward	code/layers_activation.py	/^    def forward(self, Z):$/;"	m	class:ReluLayer
forward	code/layers_convolution.py	/^    def forward(self, A_prev, W, b, params):$/;"	m	class:Convolution
forward	code/layers_loss.py	/^    def forward(self, Z,):$/;"	m	class:SoftmaxLayer
getParamsAndGrads	code/layers_activation.py	/^    def getParamsAndGrads(self):$/;"	m	class:ReluLayer
getParamsAndGrads	code/layers_loss.py	/^    def getParamsAndGrads(self):$/;"	m	class:SoftmaxLayer
np	code/layers_convolution.py	/^import numpy as np$/;"	I
np	code/layers_loss.py	/^import numpy as np$/;"	I
np	code/model.py	/^import numpy as np$/;"	I
predict	code/model.py	/^    def predict(self, data):$/;"	m	class:Model
set_batch_size	code/model.py	/^    def set_batch_size(self, batch_size):$/;"	m	class:Model
set_loss	code/model.py	/^    def set_loss(self, loss):$/;"	m	class:Model
train	code/model.py	/^    def train(self, data, labels, batch_size=128, epochs=50,$/;"	m	class:Model
zero_pad	code/layers_convolution.py	/^    def zero_pad(self, X, pad):$/;"	m	class:Convolution
